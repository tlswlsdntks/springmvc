웹 서버, 웹 어플리케이션 서버)

웹 - HTTP 기반)
클라이언트  >   인터넷  >   서버
                (HTTP)

모든 것이 HTTP)
: HTTP 메세지에 모든 것을 전송
  HTML, TEXT
  IMAGE, 음성, 영상, 파일
  JSON, XML(API)
  거의 모든 형태의 데이터 전송 가능
  서버 간에 데이터를 주고 받을 때도 대부분 HTTP 사용
  지금은 HTTP 시대!


웹 서버(Web Server)
: HTTP 기반으로 동작
  정적 리소스 제공, 기타 부가기능
  정적(파일) HTML, CSS, JS, 이미지, 영상
  예) NGINX, APACHE
---------------------------------------------------
웹 브라우저     >   1.HTTP 요청     >   웹 서버
                                        index.html
                <   2.HTTP 응답     <
---------------------------------------------------

웹 어플리케이션 서버(WAS - Web Application Server)
: HTTP 기반으로 동작
  웹 서버 기능 포함 + (정적 리소스 제공 가능)
  프로그램 코드를 실행해서 애플리케이션 로직 수행
  : 동적 HTML, HTTP API(JSON)
    서블릿, JSP, 스프링 MVC
  예) Tomcat, Jetty, Undertow
-----------------------------------------------------
웹 브라우저     >   1.HTTP 요청     >   WAS
                                        Hello.class
                <   2.HTTP 응답     <
-----------------------------------------------------

웹 서버, 웹 애플리케이션 서버(WAS) 차이)
: 웹 서버는 정적 리소스 파일, WAS는 애플리케이션 로직 수행
  사실은 둘의 용어, 경계가 애매모호함
  : 웹 서버도 프로그램을 실행하는 기능을 포함하기도 함
    웹 애플리케이션 서버도 웹 서버의 기능을 제공함
  자바는 서블릿 컨테이너 기능을 제공하면 WAS
  : 서블릿 없이 자바코드를 실행하는 서버 프레임워크도 있음
  WAS는 애플리케이션 코드를 실행하는데 더 특화


웹 시스템 구성 - Web Server, WAS, DB)
: 정적 리소스는 웹 서버가 처리
  웹 서버는 애플리케이션 로직같은 동적처리가 필요하면 WAS에 요청을 위임
  WAS는 중요한 애플리케이션 로직을 전담
---------------------------------------------------------------------------
웹 브라우저     >   Web Server          >   WAS                 >       DB
                    HTML, CSS, JS           애플리케이션 로직 수행
                    이미지
---------------------------------------------------------------------------
: 효율적인 리소스 관리 가능
  : 정적 리소스가 많이 사용되면 Web 서버 증설
    애플리케이션 리소스가 많이 사용되면 WAS 증설
  정적 리소스만 제공하는 Web 서버는 잘 죽지 않는다
  애플리케이션 로직이 동작하는 WAS는 잘 죽는다

  WAS, DB 장애 시, Web 서버가 오류 화면 제공 가능
---------------------------------------------------------------------------
웹 브라우저     >   Web Server          >   WAS                 >       DB
                    HTML, CSS, JS           애플리케이션 로직 수행 실패
                    이미지

                <   오류화면 HTML       <
---------------------------------------------------------------------------


서블릿 - 매우 중요!)
예)
--------------------------------------------------------------------------------------------------------
<form action="/save" method="post">             요청(웹 브라우저가 생성한 요청 HTTP 메시지 - 회원 저장) 
    <input type="text" name="username" />   >   POST /save HTTP/1.1
    <input type="text" name="age" />            Host: localHost: 8080
    <button type="submit">전송</button>         Content-Type: application/x-www-form-urlencoded
</form>
                                                username=kim&age=20
--------------------------------------------------------------------------------------------------------

서버에서 직접 처리해야하는 업무)
: 만약에, 웹 애플리케이션 서버(WAS) 직접 구현한다면?
  1. 서버 TCP/IP 연결 대기, 소켓 연결
  2. HTTP 요청 메세지 파싱해서 읽기
  3. POST 방식, /save URL 인지
  4. Content-Type 확인
  5. HTTP 메세지 바디 내용 파싱
     : username, age 데이터를 사용할 수 있게 파싱
  6. 저장 프로세스 실행
  -------------------------------
  7. 비지니스 로직 실행 
     : 데이터베이스에 저장 요청
  -------------------------------
  8. HTTP 응답 메세지 생성 시작
     : HTTP 시작 라인 생성
       Header 생성
       메세지 바디에 HTML 생성해서 입력
       --------------------------------------
       HTTP/1.1 200 OK
       Content-Type: text/html;charset=UTF-8
       Content-Length: 3423

       <html>
       <body>...</body>
       </html>
       --------------------------------------
  9. TCP/IP에 응답 전달, 소켓 종료

: 서블릿을 지원하는 WAS 사용을 한다면?
  ...
  7. 비즈니스 로직 실행만 구현하면 된다!
  ...

서블릿 - 특징)
--------------------------------------------------------------------------------------
@WebServlet(name = "helloServlet", urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response){
        //애플리케이션 로직
    }
}
--------------------------------------------------------------------------------------
: urlPatterns(/hello)의 URL이 호출되면 서블릿 코드가 실행
  HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest
  HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse
  개발자는 HTTP 스펙을 매우 편리하게 사용할 수 있다


서블릿 - HTTP 요청, 응답 흐름)
---------------------------------------------------------------------------------------------------------------------------------
웹 브라우저     >   localHost:8080/hello     >   웹 애플리케이션 서버(WAS)
                                                 1. WAS는 HTTP 요청 메세지를 기반으로       2. WAS 내 서블릿 컨테이너에 존재하는
                                                    request, response를 생성                해당 서블릿 객체를 호출한다

                                                 4. respone 객체를 사용하여                 3. 로직 수행 후, 종료
                <   hello world              <      HTTP 응답 생성
---------------------------------------------------------------------------------------------------------------------------------
: HTTP 요청, 응답 흐름
  1. WAS는 Request, Response 객체를 새로 만들어서 서블릿 객체 호출
  2. 개발자는 Request 객체에서 HTTP 요청 정보를 편리하게 꺼내서 사용
  3. 개발자는 Response 객체에서 HTTP 응답 정보를 편리하게 입력
  4. WAS는 Response 객체에 담겨있는 내용으로 HTTP 응답 정보를 생성


서블릿 컨테이너)
1. Tomcat 과 같이, 서블릿을 지원하는 웹 어플리케이션 서버(WAS)를 서블릿 컨테이너라고 한다
2. 서블릿 컨테이너는 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기(Life-Cycle)를 관리한다
3. 서블릿 객체는 싱글톤으로 관리
   : 고객의 요청이 올 때마다 계속 객체를 생성하는 것은 비효율적
     최초 로딩 시점에 서블릿 객체를 미리 만들어두고 재활용
     모든 고객 요청은 동일한 서블릿 객체 인스턴스에 접근
     서블릿 컨테이너 종료 시, 함께 종료
     공유 변수 사용에 주의!
4. JSP도 서블릿으로 변환되어서 사용
5. 동시 요청을 위한 멀티 쓰레드 처리를 지원


동시 요청 - 멀티 쓰레드)
쓰레드
: 애플리케이션 코드를 하나하나 순차적으로 실행하는 것은 쓰레드
  자바 메인 메소드를 처음 실행하면 main이라는 이름의 쓰레드가 실행
  쓰레드가 없다면 자바 애플리케이션 실행이 불가능
  쓰레드는 한번에 하나의 코드라인만 수행
  동시처리가 필요하면 쓰레드를 추가로 생성

요청마다 쓰레드 생성
장점)
: 동시 요청을 처리할 수 있다
  리소스(CPU, 메모리)가 허용될 때까지 처리가능
  하나의 쓰레드가 지연되어도, 나머지 쓰레드는 정상 동작한다
단점)
: 쓰레드는 생성비용이 매우 비싸다
  고객의 요청이 올 때마다 쓰레드를 생성하면, 응답속도가 늦어진다
  쓰레드는 컨텍스트 스위치 비용이 발생한다
  쓰레드 생성에 제한이 없다
  고객 요청이 너무 많이 오면 CPU, 메모리 임계점을 넘어서 서버가 죽을 수 있다

쓰레드 풀 - 요청마다 쓰레드 생성의 단점 보완
특징)
: 필요한 쓰레드를 쓰레드 풀에 보관하고 관리한다
  쓰레드 풀에 생성 가능한 쓰레드의 최대치를 관리한다. 톰켓은 최대 200개 기본설정(변경가능)
사용)
: 쓰레드가 필요하면 쓰레드 풀에서 이미 생성되어있는 쓰레드를 꺼내 사용한다
  사용을 종료하면 쓰레드 풀에 해당 쓰레드를 반납한다
  최대 쓰레드가 모두 사용중이어서 쓰레드 풀에 쓰레드가 없다면,
  기다리는 요청은 거절하거나 특정 숫자만큼 대기하도록 설정할 수 있다
장점)
: 쓰레드가 미리 생성되어있으므로, 쓰레드를 생성하고 종료하는 비용(CPU)이 절약되고, 응답시간이 빠르다
  생성 가능한 쓰레드의 최대치가 있으므로 너무 많은 요청이 들어와도 기존 요청은 안전하게 처리할 수 있다
실무 팁)
: WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread)수이다
  이 값을 너무 낮게 설정하면? 동시요청이 많을 때, 서버 리소스는 여유롭지만 클라이언트는 금방 응답 지연
  이 값을 너무 높게 설정하면? CPU, 메모리 리소스 임계점 초과로 서버 다운
  장애 발생 시? 클라우드면 우선 서버부터 늘리고, 이후에 튜닝, 클라우드가 아니면 열심히 튜닝

쓰레드 풀 - 적정 숫자
: 적정숫자는 어떻게 찾나요?
  애플리케이션 로직의 복잡도, CPU, 메모리, IO리소스 상황에 따라 모두 다름
  성능 테스트 - 최대한 실제서비스와 유사하게 성능테스트 시도
  예) 툴 - 아파치ab, 제이미터, nGrinder

WAS의 멀티 쓰레드 지원 - 핵심
: 멀티 쓰레드에 대한 부분은 WAS가 처리
  개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 됨
  개발자는 마치 싱글 쓰레드 프로그래밍을 하듯이 편리하게 소스코드를 개발
  멀티 쓰레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용


HTML, HTTP API, CSR, SSR)
정적 리소스)
: 고정된 HTML 파일, CSS, JS, 이미지, 영상 등을 제공
  주로 웹 브라우저

HTML 페이지)
: 동적으로 필요한 HTML 파일을 생성해서 전달
  웹 브라우저: HTML 해석
-----------------------------------------------------------
웹 브라우저         >  WAS               >    DB
요청 /orders.html      주문 정보 조회

                    <  동적으로 HTML 생성(JSP, 타임리프)
-----------------------------------------------------------

HTTP API)
: HTML이 아니라 데이터를 전달
  주로 JSON 형태로 데이터 통신
-----------------------------------------------------------
웹 브라우저         >  WAS               >    DB
요청 /orders.html      주문 정보 조회

                    <  DATA
                       JSON{"주문정보":100, "금액":5000}
-----------------------------------------------------------
  다양한 시스템에서 호출/연동
  UI 클라이언트 접점
  : 앱 클라이언트(아이폰, 안드로이드, PC앱)
    웹 브라우저에서 자바스크립트를 통한 HTTP API 호출
    React, Vue.js 같은 웹 클라이언트
  서버 to 서버
  : 주문서버 -> 결제서버
    기업 간 데이터통신

SSR - 서버 사이드 렌더링)
: HTML 최종결과를 서버에서 만들어진 웹 브라우저에 전달
  주로 정적인 화면에서 사용
  관련기술: JSP, 타임리프 -> 백엔드 개발자
  즉. 서버에서 이미 '렌더 가능한' 상태로 클라이언트에 전달되기 때문에, 
  JS가 다운로드 되는 동안 사용자는 무언가를 보고 있을 수 있다.
  과정)
  1. User가 Website 요청을 보냄.
  2. Server는 'Ready to Render'. 즉, 즉시 렌더링 가능한 html파일을 만든다.
     (리소스 체크, 컴파일 후 완성된 HTML 컨텐츠로 만든다.)
  3. 클라이언트에 전달되는 순간, 이미 렌더링 준비가 되어있기 때문에 HTML은 즉시 렌더링 된다.
     그러나 사이트 자체는 조작 불가능하다. (Javascript가 읽히기 전이다.)
  4. 클라이언트가 자바스크립트를 다운받는다.
  5. 다운 받아지고 있는 사이에 유저는 컨텐츠는 볼 수 있지만 사이트를 조작 할 수는 없다. 이때의 사용자 조작을 기억하고 있는다.
  6. 브라우저가 Javascript 프레임워크를 실행한다.
  7. JS까지 성공적으로 컴파일 되었기 때문에 기억하고 있던 사용자 조작이 실행되고 이제 웹 페이지는 상호작용 가능해진다.

CSR - 클라이언트 사이드 렌더링)
: HTML 결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성해서 적용
  주로 동적인 화면에서 사용, 웹 환경을 마치 앱처럼 필요한 부분부분 변경할 수 있음
  예) 구글지도, Gmail, 구글 캘린더
  관련기술: React, Vue.js -> 웹 프론트 개발자
  즉, 서버에서 처리 없이 클라이언트로 보내주기 때문에, 
  자바스립트가 모두 다운로드 되고 실행이 끝나기 전까지 사용자는 볼 수 있는게 없다.
  과정)
  1. User가 Website 요청을 보냄.
  2. CDN이 HTML 파일과 JS로 접근할 수 있는 링크를 클라이언트로 보낸다.
     CDN : aws의 cloudflare를 생각하면 됨. 엔드 유저의 요청에 '물리적'으로 가까운 서버에서 요청에 응답하는 방식
  3. 클라이언트는 HTML과 JS를 다운로드 받는다.
     (이때 SSR과 달리 유저는 아무것도 볼 수 없다.)
  4. 생략
  5. 다운이 완료된 JS가 실행된다. 데이터를 위한 API가 호출된다.
     (이때 유저들은 placeholder를 보게된다. )
  6. 서버가 API로부터의 요청에 응답한다.
  7. API로부터 받아온 data를 placeholder 자리에 넣어준다. 이제 페이지는 상호작용이 가능해진다.

참고)
: React, Vue.js를 SSR + CSR 동시에 지원하는 웹 프레임워크도 있음
  SSR을 사용하더라도, 자바스크립트를 사용해서 화면 일부를 동적으로 변경 가능


백엔드 개발자 입장에서 UI기술)
1) 백엔드 - 서버 사이드 렌더링 기술(SSR)
: JSP, 타임리프
  화면이 정적이고, 복잡하지 않을 때 사용
  백엔드 개발자는 서버 사이드 렌더링 기술 학습 필수
2) 웹 프론트엔드 - 클라이언트 사이드 렌더링 기술(CSR)
: React, Vue.js
  복잡하고 동적인 UI사용
  웹 프론트엔드 개발자의 전문분야
3) 선택과 집중
: 백엔드 개발자의 웹 프론트엔드 기술 학습은 옵션
  백엔드 개발자는 서버, DB, 인프라 등등 수많은 백엔드 기술을 공부해야한다
  웹 프론트엔드도 깊이있게 잘하려면 숙련에 오랜 시간이 필요하다
  

자바 백엔드 웹 기술 역사)
과거 기술)
1) 서블릿 - 1997
: HTML 생성이 어려움
2) JSP - 1999
: HTML 생성은 편리하지만, 비즈니스 로직까지 너무 많은 역할 담당
3) 서블릿, JSP 조합 MVC 패턴까지 사용
: 모델, 뷰, 컨트롤러로 역할을 나누어 사용
4) MVC 프레임워크 춘추전국시대 - 2000년 초 ~ 2010년 초
: MVC 패턴 자동화, 복잡한 웹 기술을 편리하게 사용할 수 있는 다양한 기능 지원
  스트럿츠, 웹워크, 스프링 MVC(과거버전)

현재 사용 기술)
1) 어노테이션 기반의 스프링 MVC 등장
: @Controller
  MVC 프레임워크의 춘추전국시대 마무리
2) 스프링 부트의 등장
: 스프링 부트는 서버를 내장
  과거에는 서버에 WAS를 직접 설치하고, 소스는 .war 파일을 만들어서 설치한 WAS에 배포
  스프링 부트는 빌드결과물(.jar)에 WAS서버 포함 -> 빌드 배포 단순화

최신 기술)
1) Web Servlet - Spring MVC
2) Web Reactive - Spring WebFlux
특징)
: 비동기 논 블로킹 처리
  최소 쓰레드로 최대 성능 - 쓰레드 컨텍스트 스위칭 비용 효율화
  함수형 스타일로 개발 - 동시처리 코드 효율화
  서블릿 기술 사용X
현실)
: 웹 플럭스는 기술적 난이도가 매우 높음
  아직 RDB 지원 부족
  일반 MVC의 쓰레드 모델도 충분히 빠르다
  실무에서 아직 많이 사용하지는 않음(전체 1% 이하)


자바 뷰 템플릿 역사 - HTML을 편리하게 생성하는 뷰 기능
1) JSP
: 속도 느림, 기능 부족
2) 프리마커(Freemarker) 벨로시티(Velocity)
: 속도 문제 해결, 다양한 기능
3) 타임리프(Thymeleaf)
: 내추럴 템플릿: HTML의 모양을 유지하면서 뷰 템플릿 적용 기능
  스프링 MVC와 강력한 기능 통합
  최선의 선택, 단 성능은 프리마커, 벨로시티가 더 빠르다